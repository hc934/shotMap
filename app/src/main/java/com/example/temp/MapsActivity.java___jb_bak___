package com.example.temp;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.location.GpsStatus;
import android.location.Location;
import android.location.LocationManager;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.v4.app.FragmentActivity;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.TextView;

import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.SupportMapFragment;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.CameraPosition;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.concurrent.ExecutionException;

public class MapsActivity extends FragmentActivity {

    private GoogleMap mMap; // Might be null if Google Play services APK is not available.
    private LocationManager locationMgr;
    private String provider;
    private Location location;
    private Marker markerMe;
    private double lat;
    private double lon;
    private String titleText;
    private String path;
    private Bitmap bmp;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_maps);
        setUpMapIfNeeded();
        addListenerOnButton();

    }

    @Override
    protected void onResume() {
        super.onResume();
        setUpMapIfNeeded();

        Button where_am_i = (Button)findViewById(R.id.Button);
        where_am_i.setOnClickListener(new Button.OnClickListener() {

            @Override
            public void onClick(View v) {
                whereAmI();
            }

        });
    }

    private void setUpMapIfNeeded() {
        if (mMap == null) {

            mMap = ((SupportMapFragment) getSupportFragmentManager().findFragmentById(R.id.map))
                    .getMap();

            if (mMap != null) {
                initLocationProvider(); whereAmI();
            }
        }
    }

    private void addListenerOnButton(){
        ImageButton imageButton = (ImageButton) findViewById(R.id.imageButton);
        imageButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent = new Intent(v.getContext(),CameraActivity.class);
                startActivityForResult(intent, 0);
            }
        });
    }
    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data){
        if (resultCode == Activity.RESULT_OK){
            titleText = data.getStringExtra("titleText");
            path = data.getStringExtra("path");
            bmp = BitmapFactory.decodeFile(path);
            markerMe.showInfoWindow();
        }

        super.onActivityResult(requestCode, resultCode, data);
    }
    private boolean initLocationProvider() {
        locationMgr = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
        if (locationMgr.isProviderEnabled(LocationManager.GPS_PROVIDER)) {
            provider = LocationManager.GPS_PROVIDER;
            return true;
        }
        if (locationMgr.isProviderEnabled(LocationManager.NETWORK_PROVIDER)) {
            provider = LocationManager.NETWORK_PROVIDER;
            return true;
        }
        return false;
    }

    GpsStatus.Listener gpsListener = new GpsStatus.Listener() {
        @Override
        public void onGpsStatusChanged(int event) {}
    };

    private void whereAmI(){
        location = locationMgr.getLastKnownLocation(provider);
        if (location != null) {
            lat = location.getLatitude();
            lon = location.getLongitude();
            showMarkerMe(lat, lon);
            cameraFocusOnMe(lat, lon);

            locationMgr.addGpsStatusListener(gpsListener);
        }
    }

    private void cameraFocusOnMe(double lat, double lng){
        CameraPosition camPosition = new CameraPosition.Builder()
                .target(new LatLng(lat, lng))
                .zoom(15)
                .build();

        mMap.moveCamera(CameraUpdateFactory.newCameraPosition(camPosition));
    }

    private void showMarkerMe(double lat, double lon){
        if (markerMe != null) {
            markerMe.remove();
        }

        String weatherData = null;
        FetchWeatherTask fetchWeatherTask = new FetchWeatherTask();
        try {
            weatherData = fetchWeatherTask.execute(lat,lon).get();
        } catch (InterruptedException e) {
            e.printStackTrace();
        } catch (ExecutionException e) {
            e.printStackTrace();
        }

        MarkerOptions markerOpt = new MarkerOptions();
        markerOpt.position(new LatLng(lat, lon));
        markerOpt.icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_AZURE));
        markerOpt.title("I am here!");
        markerOpt.snippet(weatherData);
        markerMe = mMap.addMarker(markerOpt);

        final String finalWeatherData = weatherData;
        mMap.setInfoWindowAdapter(new GoogleMap.InfoWindowAdapter() {
            @Override
            public View getInfoWindow(Marker marker) {
                return null;
            }

            @Override
            public View getInfoContents(Marker marker) {
                View v = getLayoutInflater().inflate(R.layout.info_window_layout,null);
                TextView weather_data = (TextView) v.findViewById(R.id.weather_data);
                weather_data.setText(finalWeatherData);
                TextView description_text = (TextView) v.findViewById(R.id.description_text);
                description_text.setText(titleText);
                ImageView image_marker = (ImageView) v.findViewById(R.id.image_marker);
                image_marker.setImageBitmap(bmp);
                return v;
            }
        });

        markerMe.showInfoWindow();

    }

    public class FetchWeatherTask extends AsyncTask<Double,Void,String> {

        private final String LOG_TAG = FetchWeatherTask.class.getSimpleName();

        private String getWeatherDataFromJson(String forecastJsonStr)
                throws JSONException {

            final String OWM_WEATHER = "weather";
            final String OWM_TEMPERATURE = "temp";
            final String OWM_MAIN = "main";
            final String OWM_DESCRIPTION = "description";

            String description;

            JSONObject forecastJson = new JSONObject(forecastJsonStr);
            JSONObject weatherObject = forecastJson.getJSONArray(OWM_WEATHER).getJSONObject(0);

            // Get Description
            description = weatherObject.getString(OWM_DESCRIPTION);

            // Get temperature
            JSONObject temperatureObject = forecastJson.getJSONObject(OWM_MAIN);
            double temperature = temperatureObject.getDouble(OWM_TEMPERATURE);
            long roundedTemp = Math.round(temperature-273.15);

            String resultStr = "Temperature: " + roundedTemp + ", " + description;

            Log.v(LOG_TAG, "Current Weather: " + resultStr);

            return resultStr;
        }


        protected String doInBackground(Double... params){
            HttpURLConnection urlConnection = null;
            BufferedReader reader = null;

            String forecastJsonStr = null;

            try {
                final String FORECAST_BASE_URL = "http://api.openweathermap.org/data/2.5/weather?";
                final String LAT_PARAMETER = "lat";
                final String LON_PARAMETER = "lon";

                Uri builtUri = Uri.parse(FORECAST_BASE_URL).buildUpon()
                        .appendQueryParameter(LAT_PARAMETER, Double.toString(params[0]))
                        .appendQueryParameter(LON_PARAMETER, Double.toString(params[1]))
                        .build();

                URL url = new URL(builtUri.toString());

                urlConnection = (HttpURLConnection) url.openConnection();
                urlConnection.setRequestMethod("GET");
                urlConnection.connect();

                InputStream inputStream = urlConnection.getInputStream();
                StringBuffer buffer = new StringBuffer();
                if (inputStream == null) {
                    return null;
                }
                reader = new BufferedReader(new InputStreamReader(inputStream));

                String line;
                while ((line = reader.readLine()) != null) {
                    buffer.append(line + "\n");
                }

                if (buffer.length() == 0) {
                    return null;
                }
                forecastJsonStr = buffer.toString();

                Log.v(LOG_TAG,"Forecast String: " + forecastJsonStr);
            } catch (IOException e) {
                Log.e(LOG_TAG, "Error ", e);
                return null;
            } finally{
                if (urlConnection != null) {
                    urlConnection.disconnect();
                }
                if (reader != null) {
                    try {
                        reader.close();
                    } catch (final IOException e) {
                        Log.e(LOG_TAG, "Error closing stream", e);
                    }
                }
            }

            try {
                return getWeatherDataFromJson(forecastJsonStr);
            } catch (JSONException e) {
                Log.e(LOG_TAG, e.getMessage(), e);
                e.printStackTrace();
            }
            return null;
        }
    }
}
